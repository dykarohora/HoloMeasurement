@startuml

namespace Figure {
    abstract class BaseFigure {
    }
    namespace Impl {
        class Line {
            +void Intialize(Point start, Point end, GameObject line)
        }
        class Polygon {
            +void Initialize(IList<Point> pointList, IList<Point> lineList)
        }
        class Solid {
        }
        Line --u|> Figure.BaseFigure
        Line ..u> Figure.Point
        Polygon --u|> Figure.BaseFigure
        Polygon ..u> Figure.Point
        Solid --u|> Figure.BaseFigure
    }

    class Point {
        +IReadOnlyReactiveProperty<Vector3> Position
        +void SetPosition(Vector3 position)
    }
    
    Point --u|> UserOperation.IManipulationHandler
    Point --left* BaseFigure
    BaseFigure --u|> UserOperation.IDeletable
}

namespace AppManager {
    class AppStateManager {
        +AppStateReactiveProperty CurrentState
    }
    class SizerManager {
        +IPointSettable Sizer
    }
    enum AppState {
        Intialize
        Line
        Polygon
        Solid
    }
    AppStateManager --u> AppState

    SizerManager ..r> AppStateManager
}

namespace Sizer {
    abstract class BaseSizer {
        #ReactiveCollection<Point> _pointList
        #{abstract} void OnStart()
        #{abstract}void WindUpHalfwayObj()
        #GemeObject GenerateLine(Point last, Point previous)
    }
    namespace Impl {
        class LineSizer {
        }
        class PolygonSizer {
        }
        class SolidSizer {
        }
        LineSizer --u|> Sizer.BaseSizer
        PolygonSizer --u|> Sizer.BaseSizer
        SolidSizer --u|> Sizer.BaseSizer

        LineSizer --> Figure.Impl.Line
        PolygonSizer --> Figure.Impl.Polygon
        PolygonSizer --r|> UserOperation.IPolygonClosable
    }

    BaseSizer --r|> UserOperation.IPointSettable
    BaseSizer ..u> AppManager.AppStateManager
}

namespace UserOperation {
    class VoiceCommandExecutor {
    }
    class PointSetExecutor {
    }

    interface IPointSettable {
        +void SetPoint(GameObject prefab, Vector3 position)
    }
    interface IPolygonClosable {
        +void ClosePolygon()
    }
    interface IDeletable {
        +void DeleteFigure()
    }

    interface IInputClickHandler<<MRTK>>{
    }
    interface IManipulationHandler<<MRTK>>{
    }

    VoiceCommandExecutor --d> IDeletable
    VoiceCommandExecutor --l> IPolygonClosable
    PointSetExecutor --d> IPointSettable
    PointSetExecutor --l|> IInputClickHandler

    VoiceCommandExecutor ..u> AppManager.SizerManager
    PointSetExecutor ..u> AppManager.SizerManager

    IInputClickHandler -[hidden]d- IManipulationHandler
    IPolygonClosable -[hidden]r- IDeletable

    PointSetExecutor -[hidden]r- IPolygonClosable
    

    namespace Menu {
        class MenuPresenter {
        }
        class MenuButton {
        }

        MenuPresenter --> MenuButton
        MenuPresenter --u> AppManager.AppStateManager
    }
}

@enduml