@startuml

namespace Figure {
    abstract class BaseFigure {
    }

    namespace Impl {
        class Line {
            +void Intialize(Point start, Point end, GameObject line)
        }
        class Polygon {
            +void Initialize(IList<Point> pointList, IList<Point> lineList)
        }

        Line -le-|> Figure.BaseFigure
        Line .le.> Figure.Point

        Polygon -le-|> Figure.BaseFigure
        Polygon .le.> Figure.Point

        Line -[hidden]do- Polygon
    }

    class Point {
        +IReadOnlyReactiveProperty<Vector3> Position
        +void SetPosition(Vector3 position)
    }
    
    Point -do-|> UserOperation.IManipulationHandler
    Point -ri-* BaseFigure

    BaseFigure -do-|> UserOperation.IDeletable
}

namespace Sizer {
    abstract class BaseSizer {
        #ReactiveCollection<Point> _pointList
        #{abstract} void OnStart()
        #{abstract}void WindUpHalfwayObj()
        #GemeObject GenerateLine(Point last, Point previous)
    }
    namespace Impl {
        class LineSizer {
        }
        class PolygonSizer {
        }

        LineSizer -ri-|> Sizer.BaseSizer
        PolygonSizer -ri-|> Sizer.BaseSizer

        LineSizer -[hidden]d- PolygonSizer

        LineSizer -ri-> Figure.Impl.Line
        PolygonSizer -ri-> Figure.Impl.Polygon
        PolygonSizer -do-|> UserOperation.IPolygonClosable
    }

    BaseSizer --|> UserOperation.IPointSettable
    BaseSizer ..> AppManager.AppStateManager

    BaseSizer -[hidden]r- Figure.BaseFigure
}

namespace AppManager {
    enum AppState {
        Intialize
        Line
        Polygon
        Solid
    }

    class AppStateManager {
        +AppStateReactiveProperty CurrentState
    }
    class SizerManager {
        +IPointSettable Sizer
    }

    AppStateManager --u> AppState
    SizerManager ..r> AppStateManager
}


namespace UserOperation {
    class VoiceCommandExecutor {
    }
    class PointSetExecutor {
    }

    interface IPointSettable {
        +void SetPoint(GameObject prefab, Vector3 position)
    }
    interface IPolygonClosable {
        +void ClosePolygon()
    }
    interface IDeletable {
        +void DeleteFigure()
    }

    interface IInputClickHandler<<MRTK>>{
    }
    interface IManipulationHandler<<MRTK>>{
    }

    VoiceCommandExecutor -up-> IDeletable
    VoiceCommandExecutor -up-> IPolygonClosable
    PointSetExecutor -up-> IPointSettable
    PointSetExecutor --|> IInputClickHandler

    VoiceCommandExecutor .up.> AppManager.SizerManager
    PointSetExecutor .up.> AppManager.SizerManager

    namespace Menu {
        class MenuPresenter {
        }
        class MenuButton {
        }

        MenuPresenter --> MenuButton
        MenuPresenter -up-> AppManager.AppStateManager

        MenuPresenter -[hidden]ri- UserOperation.IPointSettable
    }
}

@enduml